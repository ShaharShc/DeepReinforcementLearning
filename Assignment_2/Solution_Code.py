# -*- coding: utf-8 -*-
"""Assignment 2 - Policy Gradient Methods.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12r40ES8PDrk3b-cX6q7v-tKxJIXeHnhW

# Section 1 â€“ Monte-Carlo Policy Gradient (REINFORCE)
"""

from datetime import datetime
import time
from torch.utils.tensorboard import SummaryWriter

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext tensorboard

"""## basic REINFORCE"""

import gym
import numpy as np
import tensorflow.compat.v1 as tf
import collections

# optimized for Tf2
tf.disable_v2_behavior()
print("tf_ver:{}".format(tf.__version__))

env = gym.make('CartPole-v1')
np.random.seed(1)


class PolicyNetwork:
    def __init__(self, state_size, action_size, learning_rate, name='policy_network'):
        self.state_size = state_size
        self.action_size = action_size
        self.learning_rate = learning_rate

        with tf.variable_scope(name):

            self.state = tf.placeholder(tf.float32, [None, self.state_size], name="state")
            self.action = tf.placeholder(tf.int32, [self.action_size], name="action")
            self.R_t = tf.placeholder(tf.float32, name="total_rewards")

            tf2_initializer = tf.keras.initializers.glorot_normal(seed=0)
            self.W1 = tf.get_variable("W1", [self.state_size, 12], initializer=tf2_initializer)
            self.b1 = tf.get_variable("b1", [12], initializer=tf2_initializer)
            self.W2 = tf.get_variable("W2", [12, self.action_size], initializer=tf2_initializer)
            self.b2 = tf.get_variable("b2", [self.action_size], initializer=tf2_initializer)

            self.Z1 = tf.add(tf.matmul(self.state, self.W1), self.b1)
            self.A1 = tf.nn.relu(self.Z1)
            self.output = tf.add(tf.matmul(self.A1, self.W2), self.b2)

            # Softmax probability distribution over actions
            self.actions_distribution = tf.squeeze(tf.nn.softmax(self.output))
            # Loss with negative log probability
            self.neg_log_prob = tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.output, labels=self.action)
            self.loss = tf.reduce_mean(self.neg_log_prob * self.R_t)
            self.optimizer = tf.train.AdamOptimizer(learning_rate=self.learning_rate).minimize(self.loss)


def run():
    # Define hyperparameters
    state_size = 4
    action_size = env.action_space.n

    max_episodes = 5000
    max_steps = 501
    discount_factor = 0.99
    learning_rate = 0.0004

    render = False

    # Initialize the policy network
    tf.reset_default_graph()
    policy = PolicyNetwork(state_size, action_size, learning_rate)

    # Start training the agent with REINFORCE algorithm
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())

        writer = tf.summary.FileWriter('./logs/basic')

        # Write average reward to TensorBoard
        avg_reward_var = tf.Variable(0, dtype=tf.float32) # variable that holds average reward
        avg_reward_summ = tf.summary.scalar('Average reward over 100 episodes', avg_reward_var) # summary to write to TensorBoard

        # Write reward to TensorBoard
        reward_var = tf.Variable(0, dtype=tf.float32) # variable that holds reward
        reward_summ = tf.summary.scalar('Reward', reward_var) # summary to write to TensorBoard

        # Write loss to TensorBoard
        loss_var = tf.Variable(0, dtype=tf.float32) # variable that holds loss
        loss_summ = tf.summary.scalar('Loss Policy', loss_var) # summary to write to TensorBoard

        solved = False
        Transition = collections.namedtuple("Transition", ["state", "action", "reward", "next_state", "done"])
        episode_rewards = np.zeros(max_episodes)
        average_rewards = 0.0
        episode_loss = 0

        for episode in range(max_episodes):
            state = env.reset()
            state = state.reshape([1, state_size])
            episode_transitions = []

            for step in range(max_steps):
                actions_distribution = sess.run(policy.actions_distribution, {policy.state: state})
                action = np.random.choice(np.arange(len(actions_distribution)), p=actions_distribution)
                next_state, reward, done, _ = env.step(action)
                next_state = next_state.reshape([1, state_size])

                if render:
                    env.render()

                action_one_hot = np.zeros(action_size)
                action_one_hot[action] = 1
                episode_transitions.append(Transition(state=state, action=action_one_hot, reward=reward, next_state=next_state, done=done))
                episode_rewards[episode] += reward

                if done:
                    if episode > 98:
                        # Check if solved
                        average_rewards = np.mean(episode_rewards[(episode - 99):episode+1])
                    print("Episode {} Reward: {} Average over 100 episodes: {}".format(episode, episode_rewards[episode], round(average_rewards, 2)))

                    # Write average reward to TensorBoard
                    sess.run(avg_reward_var.assign(round(average_rewards, 2))) # update variable
                    writer.add_summary(sess.run(avg_reward_summ), episode) # add summary

                    # Write reward to TensorBoard
                    sess.run(reward_var.assign(episode_rewards[episode])) # update variable
                    writer.add_summary(sess.run(reward_summ), episode) # add summary

                    if average_rewards > 475:
                        print(' Solved at episode: ' + str(episode))
                        solved = True
                    break
                state = next_state

            if solved:
                break

            # Compute Rt for each time-step t and update the network's weights
            for t, transition in enumerate(episode_transitions):
                total_discounted_return = sum(discount_factor ** i * t.reward for i, t in enumerate(episode_transitions[t:])) # Rt
                feed_dict = {policy.state: transition.state, policy.R_t: total_discounted_return, policy.action: transition.action}
                _, loss = sess.run([policy.optimizer, policy.loss], feed_dict)
                if t == len(episode_transitions) - 1:
                  episode_loss = loss

            # Write loss to TensorBoard
            sess.run(loss_var.assign(episode_loss)) # update variable
            writer.add_summary(sess.run(loss_summ), episode) # add summary
                



if __name__ == '__main__':
    start_time = time.time()
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print("--- %s start time ---" % (current_time))
    run()
    print("--- %s seconds ---" % (time.time() - start_time))

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir='./logs/basic'

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir='./logs/basic'

"""## REINFORCE algorithm with the baseline"""

import gym
import numpy as np
import tensorflow.compat.v1 as tf
import collections

# optimized for Tf2
tf.disable_v2_behavior()
print("tf_ver:{}".format(tf.__version__))

env = gym.make('CartPole-v1')
np.random.seed(1)


class PolicyNetwork:
    def __init__(self, state_size, action_size, learning_rate, name='policy_network'):
        self.state_size = state_size
        self.action_size = action_size
        self.learning_rate = learning_rate

        with tf.variable_scope(name):

            self.state = tf.placeholder(tf.float32, [None, self.state_size], name="state")
            self.action = tf.placeholder(tf.int32, [self.action_size], name="action")
            self.R_t = tf.placeholder(tf.float32, name="total_rewards")

            tf2_initializer = tf.keras.initializers.glorot_normal(seed=0)
            self.W1 = tf.get_variable("W1", [self.state_size, 12], initializer=tf2_initializer)
            self.b1 = tf.get_variable("b1", [12], initializer=tf2_initializer)
            self.W2 = tf.get_variable("W2", [12, self.action_size], initializer=tf2_initializer)
            self.b2 = tf.get_variable("b2", [self.action_size], initializer=tf2_initializer)

            self.Z1 = tf.add(tf.matmul(self.state, self.W1), self.b1)
            self.A1 = tf.nn.relu(self.Z1)
            self.output = tf.add(tf.matmul(self.A1, self.W2), self.b2)

            # Softmax probability distribution over actions
            self.actions_distribution = tf.squeeze(tf.nn.softmax(self.output))
            # Loss with negative log probability
            self.neg_log_prob = tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.output, labels=self.action)
            self.loss = tf.reduce_mean(self.neg_log_prob * self.R_t)
            self.optimizer = tf.train.AdamOptimizer(learning_rate=self.learning_rate).minimize(self.loss)

class ValueNetwork:
    def __init__(self, state_size, learning_rate, name='value_network'):
        self.state_size = state_size
        self.learning_rate = learning_rate

        with tf.variable_scope(name):

            self.state = tf.placeholder(tf.float32, [None, self.state_size], name="state")
            self.target = tf.placeholder(tf.float32, name="trget")

            tf2_initializer = tf.keras.initializers.glorot_normal(seed=0)
            self.W1 = tf.get_variable("W1", [self.state_size, 12], initializer=tf2_initializer)
            self.b1 = tf.get_variable("b1", [12], initializer=tf2_initializer)
            self.W2 = tf.get_variable("W2", [12, 1], initializer=tf2_initializer)
            self.b2 = tf.get_variable("b2", [1], initializer=tf2_initializer)

            self.Z1 = tf.add(tf.matmul(self.state, self.W1), self.b1)
            self.A1 = tf.nn.relu(self.Z1)
            self.output = tf.add(tf.matmul(self.A1, self.W2), self.b2)

            self.estimate = tf.squeeze(self.output)
            self.loss = tf.reduce_mean(tf.squared_difference(self.estimate, self.target))
            self.optimizer = tf.train.AdamOptimizer(learning_rate=self.learning_rate).minimize(self.loss)


def run():
    # Define hyperparameters
    state_size = 4
    action_size = env.action_space.n

    max_episodes = 5000
    max_steps = 501
    discount_factor = 0.99
    learning_rate = 0.0004

    render = False

    # Initialize the policy network
    tf.reset_default_graph()
    policy = PolicyNetwork(state_size, action_size, learning_rate)
    value = ValueNetwork(state_size, learning_rate)

    # Start training the agent with REINFORCE algorithm
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())

        writer = tf.summary.FileWriter('./logs/baseline')

        # Write average reward to TensorBoard
        avg_reward_var = tf.Variable(0, dtype=tf.float32) # variable that holds average reward
        avg_reward_summ = tf.summary.scalar('Average reward over 100 episodes', avg_reward_var) # summary to write to TensorBoard

        # Write reward to TensorBoard
        reward_var = tf.Variable(0, dtype=tf.float32) # variable that holds reward
        reward_summ = tf.summary.scalar('Reward', reward_var) # summary to write to TensorBoard

        # Write policy loss to TensorBoard
        loss_policy_var = tf.Variable(0, dtype=tf.float32) # variable that holds loss
        loss_policy_summ = tf.summary.scalar('Loss Policy', loss_policy_var) # summary to write to TensorBoard

        # Write value loss to TensorBoard
        loss_value_var = tf.Variable(0, dtype=tf.float32) # variable that holds loss
        loss_value_summ = tf.summary.scalar('Loss Value', loss_value_var) # summary to write to TensorBoard

        solved = False
        Transition = collections.namedtuple("Transition", ["state", "action", "reward", "next_state", "done"])
        episode_rewards = np.zeros(max_episodes)
        average_rewards = 0.0
        episode_loss_policy = 0
        episode_loss_value = 0

        for episode in range(max_episodes):
            state = env.reset()
            state = state.reshape([1, state_size])
            episode_transitions = []

            for step in range(max_steps):
                actions_distribution = sess.run(policy.actions_distribution, {policy.state: state})
                action = np.random.choice(np.arange(len(actions_distribution)), p=actions_distribution)
                next_state, reward, done, _ = env.step(action)
                next_state = next_state.reshape([1, state_size])

                if render:
                    env.render()

                action_one_hot = np.zeros(action_size)
                action_one_hot[action] = 1
                episode_transitions.append(Transition(state=state, action=action_one_hot, reward=reward, next_state=next_state, done=done))
                episode_rewards[episode] += reward

                if done:
                    if episode > 98:
                        # Check if solved
                        average_rewards = np.mean(episode_rewards[(episode - 99):episode+1])
                    print("Episode {} Reward: {} Average over 100 episodes: {}".format(episode, episode_rewards[episode], round(average_rewards, 2)))

                    # Write average reward to TensorBoard
                    sess.run(avg_reward_var.assign(round(average_rewards, 2))) # update variable
                    writer.add_summary(sess.run(avg_reward_summ), episode) # add summary

                    # Write reward to TensorBoard
                    sess.run(reward_var.assign(episode_rewards[episode])) # update variable
                    writer.add_summary(sess.run(reward_summ), episode) # add summary

                    if average_rewards > 475:
                        print(' Solved at episode: ' + str(episode))
                        solved = True
                    break
                state = next_state

            if solved:
                break

            # Compute Rt for each time-step t and update the network's weights
            for t, transition in enumerate(episode_transitions):
                total_discounted_return = sum(discount_factor ** i * t.reward for i, t in enumerate(episode_transitions[t:])) # Rt

                # Calculate baseline
                baseline = sess.run([value.estimate], feed_dict={value.state: transition.state})[0]
                advantage = total_discounted_return - baseline 

                # Update policy
                feed_dict_policy = {policy.state: transition.state, policy.R_t: advantage, policy.action: transition.action}
                _, loss_policy = sess.run([policy.optimizer, policy.loss], feed_dict_policy)

                # Update value
                feed_dict_value = {value.state: transition.state, value.target: total_discounted_return}
                _, loss_value = sess.run([value.optimizer, value.loss], feed_dict_value)

                if t == len(episode_transitions) - 1:
                  episode_loss_policy = loss_policy
                  episode_loss_value = loss_value


            # Write policy loss to TensorBoard
            sess.run(loss_policy_var.assign(episode_loss_policy)) # update variable
            writer.add_summary(sess.run(loss_policy_summ), episode) # add summary

            # Write value loss to TensorBoard
            sess.run(loss_value_var.assign(episode_loss_value)) # update variable
            writer.add_summary(sess.run(loss_value_summ), episode) # add summary



if __name__ == '__main__':
    start_time = time.time()
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print("--- %s start time ---" % (current_time))
    run()
    print("--- %s seconds ---" % (time.time() - start_time))

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir logs

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir logs

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir='./logs/baseline'

"""# Section 2 â€“ Advantage Actor-Critic """

import gym
import numpy as np
import collections
import tensorflow.compat.v1 as tf


# optimized for Tf2
tf.disable_v2_behavior()
print("tf_ver:{}".format(tf.__version__))

env = gym.make('CartPole-v1')
np.random.seed(1)


class ActorNetwork:
    def __init__(self, state_size, action_size, learning_rate, name='actor_network'):
        self.state_size = state_size
        self.action_size = action_size
        self.learning_rate = learning_rate

        with tf.variable_scope(name):

            self.state = tf.placeholder(tf.float32, [None, self.state_size], name="state")
            self.action = tf.placeholder(tf.int32, [self.action_size], name="action")
            self.R_t = tf.placeholder(tf.float32, name="total_rewards")

            tf2_initializer = tf.keras.initializers.glorot_normal(seed=0)
            self.W1 = tf.get_variable("W1", [self.state_size, 24], initializer=tf2_initializer)
            self.b1 = tf.get_variable("b1", [24], initializer=tf2_initializer)
            self.W2 = tf.get_variable("W2", [24, self.action_size], initializer=tf2_initializer)
            self.b2 = tf.get_variable("b2", [self.action_size], initializer=tf2_initializer)

            self.Z1 = tf.add(tf.matmul(self.state, self.W1), self.b1)
            self.A1 = tf.nn.relu(self.Z1)
            self.output = tf.add(tf.matmul(self.A1, self.W2), self.b2)

            # Softmax probability distribution over actions
            self.actions_distribution = tf.squeeze(tf.nn.softmax(self.output))
            # Loss with negative log probability
            self.neg_log_prob = tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.output, labels=self.action)
            self.loss = tf.reduce_mean(self.neg_log_prob * self.R_t)
            self.optimizer = tf.train.AdamOptimizer(learning_rate=self.learning_rate).minimize(self.loss)


class CriticNetwork:
    def __init__(self, state_size, learning_rate, name='value_network'):
        self.state_size = state_size
        self.learning_rate = learning_rate

        with tf.variable_scope(name):

            self.state = tf.placeholder(tf.float32, [None, self.state_size], name="state")
            self.rewards = tf.placeholder(tf.float32, name="rewards")

            tf2_initializer = tf.keras.initializers.glorot_normal(seed=0)
            self.W1 = tf.get_variable("W1", [self.state_size, 256], initializer=tf2_initializer)
            self.b1 = tf.get_variable("b1", [256], initializer=tf2_initializer)
            self.W2 = tf.get_variable("W2", [256, 64], initializer=tf2_initializer)
            self.b2 = tf.get_variable("b2", [64], initializer=tf2_initializer)
            self.W3 = tf.get_variable("W3", [64, 1], initializer=tf2_initializer)
            self.b3 = tf.get_variable("b3", [1], initializer=tf2_initializer)
            self.Z1 = tf.add(tf.matmul(self.state, self.W1), self.b1)
            self.A1 = tf.nn.relu(self.Z1)
            self.Z2 = tf.add(tf.matmul(self.A1, self.W2), self.b2)
            self.A2 = tf.nn.relu(self.Z2)

            self.output = tf.add(tf.matmul(self.A2, self.W3), self.b3)
            self.output = tf.squeeze(self.output)
            self.loss = tf.reduce_mean(self.output * self.rewards)
            self.optimizer = tf.train.AdamOptimizer(learning_rate=self.learning_rate).minimize(self.loss)


def run():
    # Define hyperparameters
    state_size = 4
    action_size = env.action_space.n

    max_episodes = 5000
    max_steps = 501
    discount_factor = 0.99
    actor_lr = 0.0004
    critic_lr = 0.001

    render = False

    # Initialize the policy network
    tf.reset_default_graph()
    actor = ActorNetwork(state_size, action_size, actor_lr)
    critic = CriticNetwork(state_size, critic_lr)

    # Start training the agent with REINFORCE algorithm
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())

        writer = tf.summary.FileWriter('./logs/actor-critic')

        # Write average reward to TensorBoard
        avg_reward_var = tf.Variable(0, dtype=tf.float32)  # variable that holds average reward
        avg_reward_summ = tf.summary.scalar('Average reward over 100 episodes', avg_reward_var)  # summary to write to TensorBoard

        # Write reward to TensorBoard
        reward_var = tf.Variable(0, dtype=tf.float32)  # variable that holds reward
        reward_summ = tf.summary.scalar('Reward', reward_var)  # summary to write to TensorBoard

        # Write actor loss to TensorBoard
        loss_actor_var = tf.Variable(0, dtype=tf.float32)  # variable that holds loss
        loss_actor_summ = tf.summary.scalar('Loss Actor', loss_actor_var)  # summary to write to TensorBoard

        # Write critic loss to TensorBoard
        loss_critic_var = tf.Variable(0, dtype=tf.float32)  # variable that holds loss
        loss_critic_summ = tf.summary.scalar('Loss Critic', loss_critic_var)  # summary to write to TensorBoard

        solved = False
        Transition = collections.namedtuple("Transition", ["state", "action", "reward", "next_state", "done"])
        episode_rewards = np.zeros(max_episodes)
        average_rewards = 0.0

        for episode in range(max_episodes):
            state = env.reset()
            state = state.reshape([1, state_size])
            episode_transitions = []
            I = 1
            actor_loss_lst = []
            critic_loss_lst = []

            for step in range(max_steps):
                actions_distribution = sess.run(actor.actions_distribution, {actor.state: state})
                action = np.random.choice(np.arange(len(actions_distribution)), p=actions_distribution)
                next_state, reward, done, _ = env.step(action)
                next_state = next_state.reshape([1, state_size])

                if render:
                    env.render()

                action_one_hot = np.zeros(action_size)
                action_one_hot[action] = 1
                episode_transitions.append(Transition(state=state, action=action_one_hot, reward=reward, next_state=next_state, done=done))
                episode_rewards[episode] += reward

                value_estimate = sess.run([critic.output], feed_dict={critic.state: state})[0]

                if done:
                    value_estimate_next = 0
                else:
                  value_estimate_next = sess.run([critic.output], feed_dict={critic.state: next_state})[0]

                # Calculating advantage
                target = reward + (discount_factor * value_estimate_next)
                advantage = target - value_estimate

                # Update actor
                feed_dict_actor = {actor.state: state, actor.R_t: I * advantage, actor.action: action_one_hot}
                _, loss_actor = sess.run([actor.optimizer, actor.loss], feed_dict_actor)
                actor_loss_lst.append(loss_actor)

                # Update critic
                feed_dict_critic = {critic.state: state, critic.rewards: -I * advantage}
                _, loss_critic = sess.run([critic.optimizer, critic.loss], feed_dict_critic)
                critic_loss_lst.append(loss_critic)

                if done:
                    if episode > 98:
                        # Check if solved
                        average_rewards = np.mean(episode_rewards[(episode - 99):episode+1])
                    print("Episode {} Reward: {} Average over 100 episodes: {}".format(episode, episode_rewards[episode], round(average_rewards, 2)))

                    # Write average reward to TensorBoard
                    sess.run(avg_reward_var.assign(round(average_rewards, 2)))  # update variable
                    writer.add_summary(sess.run(avg_reward_summ), episode)  # add summary

                    # Write reward to TensorBoard
                    sess.run(reward_var.assign(episode_rewards[episode]))  # update variable
                    writer.add_summary(sess.run(reward_summ), episode)  # add summary

                    if average_rewards > 475:
                        print(' Solved at episode: ' + str(episode))
                        solved = True
                    break

                I = I * discount_factor
                state = next_state

            if solved:
                break
            
            mean_actor_loss = np.mean(actor_loss_lst)
            mean_critic_loss = np.mean(critic_loss_lst)

            # Write actor loss to TensorBoard
            sess.run(loss_actor_var.assign(mean_actor_loss))  # update variable
            writer.add_summary(sess.run(loss_actor_summ), episode)  # add summary

            # Write critic loss to TensorBoard
            sess.run(loss_critic_var.assign(mean_critic_loss))  # update variable
            writer.add_summary(sess.run(loss_critic_summ), episode)  # add summary


if __name__ == '__main__':
    start_time = time.time()
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print("--- %s start time ---" % (current_time))
    run()
    print("--- %s seconds ---" % (time.time() - start_time))

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir='./logs/actor-critic'

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir logs